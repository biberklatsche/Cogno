/*
  Patches node_modules/@angular/cli/bin/ng.js to forward `ng test` to Vitest.
  This enables WebStorm's Angular Test debug runner (which invokes `ng test` and
  passes Vitest-specific flags) to work without CLI argument validation errors.

  Behavior:
  - On first run after npm install, backs up ng.js to ng.original.js.
  - Writes a lightweight proxy ng.js:
    * If the first argument is `test`, it spawns Vitest with the remaining args.
    * Otherwise, it delegates to ng.original.js (preserving normal Angular CLI).
*/

const fs = require('fs');
const path = require('path');

function ensureProxy() {
  const cliBinDir = path.join(process.cwd(), 'node_modules', '@angular', 'cli', 'bin');
  const ngPath = path.join(cliBinDir, 'ng.js');
  const backupPath = path.join(cliBinDir, 'ng.original.js');

  if (!fs.existsSync(ngPath)) {
    // Angular CLI not installed; nothing to do
    return;
  }

  // Backup original if not yet backed up
  try {
    if (!fs.existsSync(backupPath)) {
      fs.copyFileSync(ngPath, backupPath);
    }
  } catch (e) {
    // If backup fails, do not proceed to avoid breaking Angular CLI
    console.warn('[patch-ng-vitest] Backup of ng.js failed:', e?.message || e);
    return;
  }

  const proxyContent = `#!/usr/bin/env node\n` +
`// Auto-generated by tools/patch-ng-vitest.js\n` +
`// Forwards \'ng test\' to Vitest to support IDE debug (e.g., WebStorm).\n` +
`const path = require('path');\n` +
`const { spawn } = require('child_process');\n` +
`const args = process.argv.slice(2);\n` +
`if (args[0] === 'test') {\n` +
`  // Use Vitest CLI (ESM) via Node to avoid loader issues on Windows\n` +
`  const vitestBin = require.resolve('vitest/vitest.mjs');\n` +
`  const node = process.execPath;\n` +
`  const vitestArgs = ['run', ...args.slice(1)];\n` +
`  const child = spawn(node, [vitestBin, ...vitestArgs], { stdio: 'inherit' });\n` +
`  child.on('exit', (code) => process.exit(code ?? 0));\n` +
`} else {\n` +
`  // Delegate all other commands to the original Angular CLI\n` +
`  require('./ng.original.js');\n` +
`}\n`;

  try {
    fs.writeFileSync(ngPath, proxyContent, { encoding: 'utf8' });
    // Make executable bit on Unix (no-op on Windows)
    try { fs.chmodSync(ngPath, 0o755); } catch {}
    console.log('[patch-ng-vitest] ng.js proxy installed successfully.');
  } catch (e) {
    console.warn('[patch-ng-vitest] Failed to write ng.js proxy:', e?.message || e);
  }
}

ensureProxy();
